#include "lib/crypto/ecdh.h"
#include "lib/crypto/cc20.h"

#include <iostream>
#include <string>
#include <cstdio>

using namespace std;

std::string stringToHexV2(const std::string& input) {
    std::stringstream stream;
    stream << std::hex << std::setfill('0');
    for (char i : input) {
        stream << /*" " <<*/ std::setw(2) << static_cast<unsigned int>(static_cast<unsigned char>(i));
    }
    return stream.str();
}

int main() {

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
    //Does not work for no good reason
    //_setmode(_fileno(stdout), _O_U16TEXT);
    // Enable buffering to prevent VS from chopping up UTF-8 byte sequences
    setvbuf(stdout, nullptr, _IOFBF, 2000);
#endif

    ECDH alice{};
    ECDH bob{};

    alice.createNewKey();
    bob.createNewKey();

    string aEC = alice.extractECPOINT();
    string bEC = bob.extractECPOINT();

    string aliceSecret = alice.getSecretFromOthersKey(bEC);
    string bobSecret = bob.getSecretFromOthersKey(aEC);

    //You can wrap each string in stringToHex() if they pose issues with formatting
    cout << "Alice's Public Key: " << stringToHex(aEC) << endl << "Bob's Public Key: " << stringToHex(bEC) << endl;
    cout << "Alice's Private Key: " << stringToHex(aliceSecret) << endl << "Bob's Private Key: " << stringToHex(bobSecret) << endl;

    string alicesSecretMessage = "This is alice's secret message that must be encrypted and decrypted";
    string bobsSecretMessage = "This is bob's secret message that must be encrypted and decrypted";

    cout << "Plaintext Alice: " << alicesSecretMessage << endl;
    cout << "Plaintext Bob: " << bobsSecretMessage << endl;

    CC20 chaB {bobSecret};
    CC20 chaA {aliceSecret};

    string encA = chaA.encryptMessage(alicesSecretMessage);
    string encB = chaB.encryptMessage(bobsSecretMessage);

    cout << "Ciphertext Alice: " << stringToHex( encA ) << endl;
    cout << "Ciphertext Bob: " << stringToHex( encB ) << endl;

    string decA = chaA.decryptMessage(encA);
    string decB = chaB.decryptMessage(encB);

    cout << "Deciphered Text Alice: " << decA << endl;
    cout << "Deciphered Text Bob: " << decB << endl;


    return 0;

}
