9:47PM 2-4-23
Do people leave journals within the code they make? I really dont know but im just gonna do it anyways because i feel like it. Its been about 3 days and i feel like im not making enough progress. Do people really do more? When i see what drendran is doing, i feel like im working slow. I dont want to be slow, that would make me feel stupid, i want to get a lot done and push out a game fast, like all the other people on youtube who can make acoherent game in a day or so.
Am i being lied to then? do people really not get more done? is this normal?
I am still learning though. my theory is that my tools are still obfuscated in the ways i see them, understand them.
Maybe i need more exposure to these tools, a more familiar experience. The only way im getting that is by doing this more, and knowing what these symbols mean and working off of that.

I got a pretty big thing out of the way, the mapping and data compaction. It seemed simple at first, then became quite a bit more complicated. I also practiced with refrencing and pointers, and found a way to "Interpret raw data as type of choice" which aids in ambiguous output, and data manipulation. refrence the code snip below:

    string s = "test";
    int i = *(int*) (s.c_str());
    cout << s << endl;
    cout << i << endl;

The result of the first cout is

    test

The second output in console resolves to and always resolves to:

    1953719668

This similar method is seen in the fast inverse square root code used for normalizing a vector quickly without a LUT. For me, its used for an imprecise, ambiguous output of data, meant to feed the world generator seed input. The seed input can only be an int, therefore cast the string as an int right? Cant do that, you have to reinterpret the data as an int regardless. A pointer-pointer cast is required.

///////////////////////

7:47PM 2-5-23
Ok so i have the heightmap generator down solid and i have 3 layers of noise that all contribute on different levels. A metamap, where theres a general trend of a certain structure, and roughness, where there is a general noisyness to the map. Finally, you have the idea of the general heightmap, where it describes the height of the world and thats really it.

i also have a climate map which is a fixed map of temperature, eventually correlating into something of an aliased mapping of temperatures, but does it really need to? what if we dont anti alias it? conservation of data?

what else could i put, humidity? what would that look like when it comes to world generation? Saturation maybe, creating a way to discern if an area is wet or dry. Very wet, wet, dry and very dry

finally, we should have one more map, as this would complete the world, but what should it be? I really dont know, i think for now i should just leave it be also im gonna migrate each map to a generic object instead of making inner classes

///////////////////////

6:43PM 2-6-23
So i have an idea that i thought was pretty cool, the cave layer system. The way i thought of it was like this:

You traverse the overworld and stumble across a marking in the ground. It looks suspicious, and seems to resemble a crack, like a spiderweb. You walk up and click on it, and with your mighty pick, you break a hole in the ground. At first it looks like you could fall a long way, but luckily you find a tree and naturally tie a rope to it to lead into the hole.

The hole is deep, and very dark. It seems to be covered with dirt few rocks scattered along. The cave system you came across is expansive. The entire cave seems to be either dirt or stone for now, so you dig through the dirt and ocassionally find bits of ore.
The caves are now lit with the power of torches and some other areas that seem to be other cave entrances faintly lighting the areas below. You can see another crack in the floor and immediately go for your pick
One thing is off however, and you have not noticed quite yet. You have one rope left made of vine, and you believe that should be sufficient. You smash through the weakpoint and reveal another layer, this time with more stone and what looks like a railway.

After smashing through, you jump down the hole. You fall almost 20 feet, and somehow survive the fall, only sustaining a mildly annoying injury. You stand up and brush yourself off. It is dark, so you light another torch, and put it at your feet. Looking up to the dimly lit hole, you find yourself realizing slowly your grave mistake is not easily reversable. You attempt to throw your rope up, hopefully to hook onto something, but alas there was nothing to hold onto so the rope simply falls to the side and back down your dark hole.

The only way to get out would to be make some sort of ladder, able to hold enough weight to support you on your way up and tall enough to facilitate hanging on the hole itself.
Around are scattered boxes and other things, left from some civilization of the before times. You break some of these crates to get crude wood planks, but as these crates break, it looks like some rusty nails are exposed, so you slam some boards together and they make an unstable but stable enough ladder that looks and feels like it could barely support you. You line the ladder up to the hole and escape, as your ladder breaks into tons of broken splintered wood below you, leaving a meacing hole once more.

---------

This idea capitalizes on the natural fear of dark and heights, both at the same time. This turns into the fear of the unknown, where there isnt a way we would know for sure what is down there. All we know is that there's a hole, and thats about it, nothing else. We may fall into this hole and break our legs or arms, and not have a way to escape afterwards. We might get eaten by large bugs, or starve slowly as our tools break and we are forced to dig with our nails. Its a mildly concerning thought that seems like a good way to provide layers of fear and need to prepare for a cave system.

Thats not to say you cant survive, like think about it- if you want to be a cave hermit, you could hunt cave things and eat them, consume mushrooms and never get light, and be one with the tunnels, and drink rainwater, but thats a task and really sucks in comparison to top end living.

ANTS:
The idea was positied as a joke at first but then became something i wanted to expand on. The game needs a threat, something that puts the player in a position of fear and uncertainty. Without a force to be rekoned with, the world fades into pointlessness, as survival is tantamount.
originally, the joke was that i was making an ASCII game about ants and them doing fun things like creating colonies and fighting eachother, foraging and digging. This looked like, to the others, an 'ant simulator' i suppose, so i brushed it off as 'its a work in progress'. The thought came to me after so much bullying that i eventually had a crossing thought about danger, fear, and destruction- what if the world was filled with dog sized ants that could communicate via pheremone and sound only?
Ants are pretty terrifying- they work together to forage, fight, enslave and farm, and have underground nests that can burrow complex tunnels. Ants have armor and are equipped with razor sharp mandibles, capable of ripping and tearing flesh with ease, and can carry many times their own weight.
for people now, we have a hard time dealing with them and it poses a serious problem , as some ant colonies have viscious venom that can kill you in minutes.

///////////////////////
2/10/23

After smashing my head against a wall for a few hours figuring out git, i managed to fix my stuff and move on
i added a proper offset for world sections so that everything stays consistent with area, so you can have chunks in other places other than 0,0
im thinking of a way to store the world bits. I figure i create a region class that operates something like minecrap but is a bit larger. Its easier to store data in single files than many files. lets do some opportunistic math. lets say that an entity can contain, idk, about 250 bytes. Not much. now, we can have 4 entities per tile, not including mobs.
our world class that holds chunks of the world is 21k bytes, and we can opportunistically store 17 layers of stuff on top of each tile
each layer is 64 x64, so thats 4096. 17 layers means 4096*17=69,632 tiles, and that times 4 entities is 278k entities. times 250 is almost 70M. this accounts for almost everything, with 70MB being the max you can get to really, unless you have some crazy stuff for entities.
This mandates the idea of an entity class, that handles static values within each area. ideally, we would also be able to write lua scripts and bind them to these entities, so we can move them, send signals, and all that.

whatever, each entity should really only use json data as needed for basic things like resistances or extra health bars anyways- actually what could it be used for? well i bet...  hmm.. im not sure yet but my gut tells me it will be important soon

////////////////////////
2-12-23

I spent all of yesterday and part of today thinking about files and how to store data. I think i have it figured out, hopefully this black box of file manipulation is not as bad as i theorize. As long as i can think of my maps as pure data, 8 bits wide in each payload, i believe this will be totally ok. Unless there is a horrendous process for expanding files and im not thinking on my feet well enough, well, im not sure what to think.
Thinking about how much data ill be able to fit into my files however is alarming. If i abstract the entire world into 6MB areas that could in theory hold entire cities, that would be amazing. The complicated parts come with entities and how many may exist in a level. Luckily we will be able to compress this, which actually, now that i think of it, that 6MB for a region could be much smaller, in the kilobytes. that would be incredible, seeing how easy it would be to have someone run a server on a 100/10 connection, the most common internet speed in the entire country. I think the lists of entities could be exhaustive, and create large areas of the world where entites easily occupy more data than an entire region. For now, mods wont be here- we will have a way to define new objects, but storing them is important and we must make certain that our entity files are not too large. Entities are blocks and mobs, remember.
We are off to a good start.

////////////////////////
Morning of 2-13-23

I dont want to do any thinking on the train before i get into work. Seems like a whole lot of thinking.
I do however want to write, thats relaxing enough as the morning sun shines on my face riding at 80 mph towards chicago.

Have you ever thoguht of thi sproject out of your personal context? From a third person perspective this could be seen as a genesis project, one story of many that may be boring at first and mundane, but after the project concludes and people have nostalgic thoughts and reasons to think fondly upon this creation, they may have a glimpse of the feels that i experience here, right now, riding the train to work writing this.
I imagine one day ill eventually finish, and what ill make is something truly cutting edge, something that can scale properly and has the best of everything within.
A great leader truly was part of the community, and does it because he loves his people, not because he loves ruling over them. With hard times comes one that cares, he who is strong of heart and soul. They will listen and learn from the people that they govern, and so for a better life, they will do everything they can to work together. The leader rules out of passion rather than gain, and a project they could throw away at a moments notice is nothing more than a drop in a bucket of a massive project that exceeds the size of the world. Fail once, and feel the consequential nature of nothing, and fail 50 times more only to feel the same. All you need is one, do not let it delay you. Nobody choses their day, and so all you can do is wait.

////////////////////////
Morning of 2-15-23

Need some help thinking about what i need to do next. Rubber ducky programming
So far i have a way to get region coordinates to and from convention, and check if a region exists or not
I then made a way to start writing chunks, but was immediately disrupted because the question arose "How do i know if a chunk already exists or not in our file" followed by the question of "how can i mark a chunk as exists in our database".
I built 2 functions that when fed a file stream, it immediately tells me if a chunk exists or not, and another when fed an array place, finds if that chunk exists or not.
Actually scratch that, i did not make a reader only function, i need that next.
Ok i made it, it was easy since i already had most of the code
Now we know when chunks exist, when they dont, can set them to exists, and so forth.
Before we work with the chunks themselves, we must work with the hashes and timestamps.

Setting and getting hashes seems to be fine now, now lets duplicate that for timestamps
also we need a way to shove integers reliably into chars. We can use the below to figure this out:

    From an int, to a char:

        int i = 9082130;
        char data[4];
        ::memcpy(data,&i,4);

        we can shove the char array back into whatever we want, its stored and away.

    From a char[4] to int:

        int x = *(int*) data;

    Outputting i to console and x both should give the exact same value. If they dont the world ends

////////////////////////
02-17-2023

Ok I have a way to write all the fields within the world file. Good.
Now we can make the meta functions.

////////////////////////
03-05-2023

Its a sunday and im having fun knowing that most of my journey for making worlds is coming to a zenith, rather than stagnating and not moving forward. I loathe thinking that all my struggles are for nothing, but at the same time, i think that is my work really a struggle? After i do it and complete it, i have an object of sorts in my mind that seems capable of deconstructing the inner workings of what i do, and it seems simple- we know the offset of each world and how much data itll take to make it, so fine, we can just use that offset to... (and then i realize there are 20 steps to get to my place in which ive gotten so far.)

Maybe its how i see people. Drendran, or Nathan rather, has a project where the results are tangible and there, as in, he can jump in his game and see the fruits of his labor and work on that. He seems to know quite a bit about what he does and thats great, it just seems so astronomically more complicated, it makes me feel like a midwit. A midwit would see my code and think its something space age, and a true master would call it nothing, as this compares to nothing a master would do. A master would have all their ducks in a row, with a complete toolchain, ready to do about anything. You would come to his office and ask for a product, and he has already made it in his head, with a timer counting down till he finishes it within hours, simply stitching together a few things to work in harmony.

Ill eventually become a master of simplicity and function, able to deploy changes and perform tests with ease, creating little turbulence in my brain as i proceed. not now, possibly never, but hopefully and faithfully one day.

When i think of masters of this, sometimes i might think of someone who works on a huge project for a big company or someone like terry davis, who wrote a full operating system, kernel, etc. fascinating in a morbid way as to how someone like him was hunted and stalked, possibly in real life or simply by the confines of his mind. Maybe you need to be truly schizo in order to do what he does, and with selection of a drawback, you can extract more out of yourself in a transactional return. Perhaps my unwillingness to feel at peace with my knowledge is just that, and it may bring me down a deep dark path that i will never escape. I only hope i meet god at the end of this mind torture path instead of whatever may lurk in the opposite direction, as the worst fear in the world is being betrayed and suddenly realizing that after passing the point of no return, you look behind you and see what was and what could be, and realize there is nothing you can do to ressurect that or turn back. True death starts when this is seen, as you send yourself into hell and eternally experience, not just witness, the hell of your deepest fear and morbid contraption. My prayer is that i either live eternal and keep creating and building, giving and seeing, or die in bliss, knowing that i did something good and interesting, not fearing the downsides. Perhaps, simply creating a game to waste others' time is enough to send me to fire and brimstone, as what ive done was not good enough for the masses.

////////////////////////
03-10-23

I need to work on storing entities. After all, this server software will be used to handle state changes or statics.
Entities are things that can hold data and qualities. For example, You are an entity. A block on the wall is an entity. A thing on the ground, an ant, or a part of a machine. all entities.
Entities need a type, and a bit of other data
ENTITY:
- Has
    - ENTITY_BASIC
    - Is part of the world and overlays a spot. Display depends on location and heightmap representation. Can only have integer based coordinates and nothing else, must have an XYZ rather than an XY

        -BLOCK
            -An impassible obstruction that has qualities
        -TILE
            -A floor object that can be stepped on but may have qualities that change how things above behave

    - ENTITY_PRECISE
        - Each living entity has an XYZ+ coordinate, where each coordinate can have a fraction attached as one byte to represent sub-block positions. the datatype for COORDINATE_FRAC is three ints, for xyz respectively and then three chars, for the fractional split.

        -LIVING

.. WIP ...

////////////////////////
03-13-2023

Ive gained some confidence for how i should design entities by investigating the way Minecraft handles the data behind the entities. Since this is basic data storage, we should cover a few things when it comes to what kind of data we should store and what is important. This comes by covering all the things an entity has or could have. Entities can switch between their subtypes easily but never between their parent types (living to tile, simple to player)

An entity needs a disambiguation between something with an AI, or something simple. There are a few classes of entitys therefore, and it starts here
- SIMPLE
    Simple entities may be items or things that do simple things. They can hold items or literally be items. These things have a position and a pointer to an inventory, or not. They are displaced by impassible things and should be as static as the rest. This entity may or may not be permanent, and if it isnt permanent, it has an idle countdown timer on it. Subtypes include the following.
    - ITEM
    - LIVING
        Complex entities that usually move on their own and have hitpoints, resistances, AI and more status information that may be put together within the entity itself. Defaultly permanent unless specified otherwise. Has a simple angular vector of 8 possible facings, to represent the heading of the entity.
        - ALIGNED, describes an AI with preferential treatment to a specific group or individual, such as a hostile ant that is passive towards its clan but hostile towards players
            - PLAYER
        - NEUTRAL, describes an AI with no ability for preference to violence or caring.
    - TILE
        An object that takes a place within the world and does not have the ability to move on its own but can be moved entire blocks at a time. Things like walls and chests, anything you can place or have on the floor.
        - SOLID, an object that is impassible. Could be a wall or a stone.
        - FLOOR, an object that is capable of supporting a player, can be placed on the ground, and supported in the air possibly
        - EPHEMERAL, an object that is able to be passed through by anything and does not support people.

Also there needs to be a way to compress data into a solid format for disk space saving. So its compressed, its entity data, and it contains JSON data about our entity. Its going to be standardized and almost short sighted but who cares.
I figure what i could do is create a data compactor clause for each entity and apply that as a named compression tag. Named and Serializable Compressed Attribute Tag or NSCAT are comprised of a pattern, that expands the data to JSON data for later parsing. If someone knows the pattern already, they can interface with the object from the disk. Its a neat way to store binary data, and seems like a good way to store data to the disk
on the disk, the pattern would have a UUID worth 4 bytes, giving us a maximum pattern amount of 4,294,967,295 which is excessive and should never realistically be reached. The likelyhood of this game using every tag possible is insane and we could fix this with tag nesting anyways.

////////////////////////
03-15-23

Im a dumbass and went to the airport way too early. Im gonna take a walk and find a place to think to myself
I found a food court by the international area

I want to focus on how i format entities on disk. I cant do JSON like notch, because that relies on general compression like GZIP to handle data which is less efficient than compressing the data myself and finally compressing it with GZIP.

Entities should be able to layer in inheriteance on top of eachother, so we can add more types by using less data. By declaring a template, we need a parent class to inherit from
The first entry into an entity template is the parent. This name is a fully qualified name such as "projectile" to start. Everything is a base entity and if it has no parent then is stays as a base entity

All entities must have a texture, therefore we should simply use the qualified name of the entity to derive what texture it should have

Next is the datatypes that should be implemented on top of the base entity data. This is the data that will be encapsulated within the {} that exist at the end of the entity entry. Each template is fairly specific, with the following format:

Template:
    type projectile;
    parent;
    members: [
        byte xPrecision
        byte yPrecision
        float xV
        float yV
        ]

In order to set this up correctly, we need to ensure the following:
- a texture is present, otherwise itll use the default texture
- a valid template
- a unique type name

Once set up we should have a new entity.

Valid datatypes are exactly the same as in C++, however we dont have extended types.
    1 byte:
        char, compile to UTF-8 Character
        byte, a number that can range from -128 to 127
        ubyte, a number that can range from 0 - 256
        pack, a special datatype that can hold named data, where you can name the bits and pack in up to 8 of them into one char.
           use multiple of these to form a large bitfield for special data

    2 bytes:
        short, a number that ranges from -32,768 to 32,767
        ushort, a number that ranges from 0 to 65,536
        float11, a number with imprecision, known as nanoFloat that can range from -128.000 to 127.000. The precision granted to the number aliases at marks truncated at each fraction of 256/100, so you count by 0.390625. The minimum climb or descent rate is the same as the resolution times the update rate.

    4 bytes
        int, a number that ranges from -2,147,483,648 to 2,147,483,647
        uint, a number that ranges from 4,294,967,294
        float31, a 3 byte number with 1 byte of standard precision

    8 bytes
        long, a number ranging from -9223372036854775808 to 9223372036854775807
        ulong, a really long number that youll never count to its max fully
        float71, a 7 byte integer with 1 byte of standard precision. Ranges from -4611686018427387904.000 4611686018427387903.000


    variable datatypes requiring a 2b ushort for size
        string, an array of characters that can contain any character. Max entry size is 65536. Size calculated on

One thing to note is the concept of added precision on some datatypes. nFloat, mFloat and iFloat are all datatypes that allow for enhanced precision up to a nominal constant limit. Floating point units lose precision with greater values, which is fine for small values but fails when we want to have a large number with enhanced precision.
By adding a character to the end of the data, we can sacrifice a bit of the floor or ceiling for a decimal point with a configurable amount of precise places.

In addition to pcas, with that being the datatype, we need a type of file to hold this data and a format for that as well.
To define a template, we would make am HACP, or Halcyonicus Attribute Casting Pattern. The HACP is responsible for defining the way our data looks and works, and how it compiles to an object based on name. When we define an HCAP, we would make a new text file and emplace our template defined above within. The file may be short, so we can probably allow people to organize the entities they want to define based on their own criteria. We can open this possiblity up with the ability to put multiple things in one file, and read from that file on boot. This saves a lot of headache with constantly statting more and more little files within a directory.

How do we load all of this into memory and work with it though?
On the server, which would be loaded in any capacity if we want to play (SP binds to the machine address with a random port and deny all ACL except user X) we would probably store the entity after we grab its custom data, and say:

    "we know this special type of entity exists and has these properties stored in a KV map. This is a type, not an entity yet. We have just started the server and dont know if there is anything that matches this in the areas that may get loaded yet."

Once stated, we can start loading things from the disk. We can then say:

    "A load request was queued for chunk XX:YY, and therefore we need to restore the positions of the entities within. When we do this, we should indiscriminately load all the entities within this area into memory, and finally add them to the correct index and register them as an active entitiy"

Once we have an entity in the world, it first gets added to an index where it will be registered for that type, with a secondary index for the location in which it is in as well. This index helps us find and work with the entities, and run their scripts. Since every entity is unique and does something different, every entity should have a script that it runs based on type. We can then say the following, albeit slightly longer than the last:

   "This entity was recently added to a registry of active objects, and was indexed to its processor. The processor has defined attributes about how to affect this entity in memory, changing the KV information within and performs actions on it now along with the rest of the indexable entries for that object class.

   While in the registry of entities, this will now be subject to any effects defined by the entity processor for this entry. when this chunk is not loaded, the entity goes out of scope, or goes into low power mode where its processed and aged in the background on a timer that opportunistically updates as it sees fit, and may forward the workload to other systems for lazy distributed processing as fully qualified jobs."

////////////////////////
03-17-23

I need to narrow the job scope of my entity class. The entity class is built to contain and store data, output the final data of the entity and traceback pcas data that can set up entites and read templates. I should start with the bottom, the YAML parser that allows people to create entities out of a yaml file.

I suppose i also have already a JSON parser and this isnt exactly a problem for the format since YAML is basically the same as JSON. I can use my header only json parser and deal with that in the same way.

The entity storage format should be simple and work like so:
    Template has a set of static and active values, where static values are immutable. Active values change with the entity and are going to eventually be stored in memory for later usage alongside the entity ingame
    The template needs the following as well:
        A name
        the parent in which precedes it

    So all in all, we have three things, parent, typename, and attributes. Simple. Remember this is just data storage and defining the save pattern behavior. Nothing about this requires extensive thought about how an entity should be handled- yet.

    All active attributes should be stored in a flat KV map within the entity.
    What happens when we want to pull data in any way from this entry? In memory, we have a VK map where everything is stored by name. Of course matching strings is tough and we dont want to do that all the time while updating entities, or would we? I mean..
    This makes me think about imposing artificial limits to the system, so we dont add abstractions too far from our base entity.. I am not sure if this is responsible or not but we will figure that out soon

///////////////////////
03-19-23

A lot of work was recently done now that i have access to my windows machine. Upon transferring the updated tests and commits to the windows machine, i attempted a few tests to ensure everything was working as expected. Upon doing this, i initially only tested entities and how they would function, and that worked fine. Reimplementing the world read test found that the world was no longer writing to the correct areas, and the directories were not creating. This eventually componded to a unique issue that took lots of my time and found me sitting for hours on end, unavailable to continue forward.

Firstly, i had to make a lot of translations to how windows handles reading and creating directories, as doing so requires the usage of the windows.h library in order to get anything done. I had to steal a method that got me the current directory and a few other things that allow me to manipulate files and folders. This was annoying, but possible and relatively easy compared to the next task.

The next roadblock in gist was not being able to fully write out my worlds and instead only partially doing so. The reason for this behavior is because there was at one point some sort of issue regarding the

//////////////////////////
03-29-23

Ive decided what art style i want to target, i want to create all my assets in the light of how Hyperlight drifter does theirs.

Here's how i start with my game, i should first start small, and make a texture atlas of simple tiles, that of which is my floor tile, just something simple
get that to intelligently be able to blend with all the other tile types by allowing it to have stony walls and variations with out stony walls

    1. Create a grass tile that is easily repeatable
    2. find the best way to create rocks on the grass for the edges that border the water

I just had another thought, we need to expand the verticality of the heightmap into 4 bits instead of 2. My compactor algorithm should be overridden so we can multiply the amount of heightmap we have
Our region files also desperately need a version string worth 16 characters at the beginning.
Why stop at 4, why not 8?
Hmmm, it seems that the mapping algorithm might have some trouble with 256 values, maybe we should stick to.. maybe
The mapping object actually, it will only have issues with the rounding bias, which we can remove. We should instead not worry about that and override it anyways

//////////////////////////
4-23-23

Pull from aether
When artists create, they envision a concept or idea in its most ideal format, something never seen quite the same, and then copy that. This is translated into the real world, as something unique to everyone and this is what creates true art
Your ability to genesis this material and then transfer it to the world is correlated directly to your ability to create, or from what others see as the ability to output. People missing the first step, genesis of ideas, are inherently consumers and are soulless, while people who lack the ability to release their inner genesis are bound to be lost, ill, or depressed. This genesis builds and expires, and forms a toxic aether that forces its way out and causes unintended behavior. it degrades what they do have left, and causes neurological damage.

Programming is unique in that in order to output all of your genesis, you must be able to create the translator, or the framework of display. Then, you can start to transfer your genesis to the screen and do what you want, and the only thing to worry about is keeping your genesis around so that it doesnt expire and you loose all your work

//////////////////////
03-26-23

Ive had a lot of thoughts about entities and how they should be in my game. I think too much about these things and i want to make sure that my game is complete to a point, where i feel comfortable with the product. I cant stagnate when it comes to development, and while i dont have a deadline, i also dont have all the time in the world. I want my idea to come about some way or another. The idea is simple, and dynamic. I could for hours think and scream at nothing, but i should not, because if i do, well, ill eventually become nothing, all at the end of nowhere. Another project that went nowhere. Another thought not completed or flushed out.
This is the poison i consume, the effects of never completing anything in the way i want. Ive set normal goals, ones that are achievable and within reach, but my mind wanders and becomes.. something that i cannot explain in words.
This is my game. I have the ability to do everything i want or could possibly need, and now- now ive taken a break, and its time to stop this. I need to continue pushing forward.

//////////////////////
04-24-23

Where did my last journal go from yesterday? I dont know..
I just had a thoguht, what was it..
First comes the grass, and then the rain, all the while the trees and bushes fill in one after another. From a hand of god that places down then lets automatons do his bidding, a forest shall come from nothing, and it shall be wonderous. Thousands of trees and bits of green, all changing in accordance with nature

In other news, HALNET is coming along, and i finally figured out how to install and use other libraries, so we are set. I just got openSSL working for ECDH and found a library that actually works for ChaCha20, so we are in business

Irish stick fighting but the sticks are actually staves, where they are meant to channel Vril via mechamagical apparatuses
Bataireacht fighting as a wizards foci where when they hit the stick with something, that something extracts stored energy from the Sheleighlan and imparts it onto the world
"Name something youve seen but never heard of, something that comes once and looks like youve seen it before but has no name for you to use"
The Sheleighlah

//////////////////////
04-27-23

Ive fund a cross platform difference between windows and mac for the library i use called ENET. ENET is my library i use to prepare communications between host and server, set up listeners and sockets etc. This fails to install and work on windows, which is a dealbreaker. I assume if it works on my mac, it will logically work on linux as well, and maybe on windows, but we cant be sure. I need everything here to compile on my NT platform because i plan to have this be fully windows/mac/linux cross compatible. The server at least should work on any deployment, be entirely self contained, have no external dependencies and be interfaceable via a terminal
