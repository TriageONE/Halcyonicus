#include "lib/types/cfloat.h"
#include "lib/entity/entitylocation.h"
#include "lib/entity/entity.h"
#include "lib/entity/entityCluster.h"

#include <iostream>
#include <string>
#include <cstdio>

using namespace std;

int main() {

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
    //Does not work for no good reason
    //_setmode(_fileno(stdout), _O_U16TEXT);
    // Enable buffering to prevent VS from chopping up UTF-8 byte sequences
    setvbuf(stdout, nullptr, _IOFBF, 2000);
#endif
    cfloat x(9555.22), y(1232.333), z(2);
    cfloat x2(155.5552), y2(-2732.0), z2(-10);
    cfloat x3(15.552), y3(8292.9823), z3(-133);

    ENTITYLOCATION el = ENTITYLOCATION(x,y,z);
    ENTITYLOCATION el2 = ENTITYLOCATION(x2,y2,z2);
    ENTITYLOCATION el3 = ENTITYLOCATION(x3,y3,z3);

    string type = "base.tree";
    string type2 = "base.machine";

    ENTITY e = ENTITY(el, type);
    ENTITY e1 = ENTITY(el2, type);
    ENTITY e2 = ENTITY(el3, type2);

    DYNABLOB d1 = DYNABLOB(string("a lot"));
    DYNABLOB d2 = DYNABLOB(cfloat(1209031.203), DYNABLOB::CFLOAT );
    DYNABLOB d3 = DYNABLOB('1', DYNABLOB::CHAR);
    DYNABLOB d4 = DYNABLOB(50023, DYNABLOB::SHORT);
    DYNABLOB d5 = DYNABLOB(5.00231, DYNABLOB::FLOAT);

    string d1s = d1.serialize();
    string d2s = d2.serialize();
    string d3s = d3.serialize();
    string d4s = d4.serialize();
    string d5s = d5.serialize();

    e.setAttribute(d1s, "hp");
    e.setAttribute(d2s, "age");
    e1.setAttribute(d3s, "dead");
    e2.setAttribute(d4s, "halScale");
    e2.setAttribute(d5s, "eFactor" );
    //Time to create a cluster
    WORLDCOORD wc = WORLDCOORD(0,1,4);

    ENTITYCLUSTER ec = ENTITYCLUSTER(wc);

    ec.areas[0].push_back(e);
    ec.areas[0].push_back(e1);
    ec.areas[0].push_back(e2);

    string levelSerial0 = ec.serializeLayer(0);

    cout << "LEVEL SERIALIZATION RESULT: " << endl << levelSerial0 << endl << "LEVEL SERIALIZATION END" << endl;

    ENTITYCLUSTER ec2 = ENTITYCLUSTER(wc);

    ec2.deserializeIntolayer(levelSerial0, 0);

    cout << "BEGIN OUTPUT FOR ENTITIES IN EC2: " << endl;

    for (ENTITY ex : ec2.areas[0]) ex.out();

    cout << "END OUTPUT FOR ENTITIES IN EC2" << endl;

    return 0;

}

